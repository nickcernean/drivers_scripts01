import string
import random
import binascii

r = 'abcdef'
sequence_names = []

# this function generates a string for the sequence name in the device, it uses the hex values for the sequence


def sequence_name_generator():
    a = ""
    for i in range(0, 36):
        if i == 8 or i == 13 or i == 18 or i == 23:
            a += "-"
        else:
            b = random.choice(r + string.digits)
            a += b.lower()
    # print(a)
    return a


# this function will give the proper name to the sequences
def sequence_caption_generator(input1):
    b = "Input " + str(input1+1) + " Mute on"
    return b


def data_generator(count, direction):
    d = "Input " + str(count+1) + "*2" + direction + "GRPM\r"
    # <----------------- CHANGES CAN BE MADE HERE
    # the following line will put the output in bytes
    d = bytes(d, 'utf-8')
    # this line transforms the command into HEX code
    d = binascii.hexlify(d)
    # it then is returned to string format
    d = d.decode('utf-8')
    # and then put in ALL UPPER CASE as following a normal sequence generated by the device editor
    d = d.upper()
    d = "1B" + str(d)
    # print(d)

    return d


def sequence_generator(count):
    a = str(sequence_name_generator())
    sequence_names.append(a)
    c = "            <Sequence Name=\"" + a + "\""
    c += " Caption=\"" + str(sequence_caption_generator(count)) + "\""
    c += " DeviceMenu=\"True\" ProjectMenu=\"True\" Selectable=\"True\" Deletable=\"True\" SequenceType=\"Volume\" " \
         " UseHeaderFooter=\"True\">\n" \
         "              <Description />\n"
    c += "              <Image />\n" \
         "              <Type Value=\"Continous\" />\n"
    c += "              <Command>\n"
    c += "                <Data1>" + str(data_generator(count, "+")) + "</Data1>\n"
    c += "                <Data2 />\n" \
         "                <Data3>" + str(data_generator(count, "-")) + "</Data3>\n" \
         "                <Data4 />\n" \
         "                <CountStart Value=\"0\" />\n"
    c += "                <CountStop Value=\"0\" />\n" \
         "                <SecondCountStart Value=\"0\" />\n" \
         "                <SecondCountStop Value=\"0\" />\n" \
         "                <Delay Value=\"100\" />\n" \
         "                <Delay2 Value=\"100\" />\n" \
         "                <MinimumVolume Value=\"0\" />\n" \
         "                <MaximumVolume Value=\"100\" />\n" \
         "                <VolumeStep Value=\"1\" />\n" \
         "                <RepeatSpeed Value=\"500\" />\n" \
         "                <CountType Value=\"String\" />\n" \
         "                <ByteOrder Value=\"LSB\" />\n" \
         "                <CheckSum Name=\"None\" Caption=\"None\" Value=\"None\">\n" \
         "                  <Type>_</Type>\n" \
         "                  <FromByte>0</FromByte>\n"
    c += "                  <ToByte>0</ToByte>\n" \
         "                  <TargetByte>0</TargetByte>\n" \
         "                  <CRCPoly>0</CRCPoly>\n" \
         "                  <CRCIntVal>0</CRCIntVal>\n" \
         "                  <CRCFinalXorVal>0</CRCFinalXorVal>\n" \
         "                  <CRCRevDataByte>0</CRCRevDataByte>\n" \
         "                  <CRCRevFinalCRC>0</CRCRevFinalCRC>\n" \
         "                  <CRCBitNumber>0</CRCBitNumber>\n" \
         "                </CheckSum>\n"
    c += "                <CountFormat Value=\"Decimal\" />\n" \
         "              </Command>\n" \
         "            </Sequence>\n"

    return c


if __name__ == '__main__':
    result_final = ''
    for i in range(0, 32):
        result_final += sequence_generator(i)
    file2 = "C:/Users/fhu/Desktop/Result.txt"
    with open(file2, 'w') as destination:
        destination.write(result_final)
        destination.close()
