import string
import random
import binascii

r = 'abcdef'
sequence_names = []

# this function generates a string for the sequence name in the device, it uses the hex values for the sequence


def sequence_name_generator():
    a = ""
    for i in range(0, 36):
        if i == 8 or i == 13 or i == 18 or i == 23:
            a += "-"
        else:
            b = random.choice(r + string.digits)
            a += b.lower()
    # print(a)
    return a


# this function will give the proper name to the sequences


def sequence_caption_generator(input1, output1):
    b = "MIC " + str(output1+1) + " Input " + str(input1+1) + " volume"
    return b


# this function will generate the command in ASCII characters and then transform it into bytes so that it can be
# transformed into the hex values, then the resulting string is decoded from bytes into a string and capitalized


def data_generator(input1, output1):
    d = "set," + str(output1) + ",1," + str(input1) + ",0" + "\n\r"
    # the following line will put the output in bytes
    d = bytes(d, 'utf-8')
    # this line transforms the command into HEX code
    d = binascii.hexlify(d)
    # it then is returned to string format
    d = d.decode('utf-8')
    # and then put in ALL UPPER CASE as following a normal sequence generated by the device editor
    d = d.upper()
    # print(d)
    return d


def sequence_generator(input1, output1):
    # CHANGE
    a = str(sequence_name_generator())
    sequence_names.append(a)
    c = "            <Sequence Name=\"" + a + "\""
    c += " Caption=\"" + str(sequence_caption_generator(input1, output1)) + "\""
    c += " DeviceMenu=\"True\" ProjectMenu=\"True\" Selectable=\"True\" Deletable=\"True\" SequenceType=\"Volume\" " \
         " UseHeaderFooter=\"True\">\n" \
         "              <Description />\n"
    c += "              <Image />\n" \
         "              <Type Value=\"InDecrement\" />\n"
    c += "              <Command>\n"
    c += "                <Data1>" + data_generator(input1, output1) + "</Data1>\n"
    c += "                <Data2 />\n" \
         "                <Data3></Data3>\n" \
         "                <Data4 />\n" \
         "                <CountStart Value=\"11\" />\n"
    c += "                <CountStop Value=\"11\" />\n" \
         "                <SecondCountStart Value=\"0\" />\n" \
         "                <SecondCountStop Value=\"0\" />\n" \
         "                <Delay Value=\"100\" />\n" \
         "                <Delay2 Value=\"100\" />\n" \
         "                <MinimumVolume Value=\"0\" />\n" \
         "                <MaximumVolume Value=\"127\" />\n" \
         "                <VolumeStep Value=\"1\" />\n" \
         "                <RepeatSpeed Value=\"100\" />\n" \
         "                <CountType Value=\"String\" />\n" \
         "                <ByteOrder Value=\"LSB\" />\n" \
         "                <CheckSum Name=\"None\" Caption=\"None\" Value=\"None\">\n" \
         "                  <Type>_</Type>\n" \
         "                  <FromByte>0</FromByte>\n"
    c += "                  <ToByte>0</ToByte>\n" \
         "                  <TargetByte>0</TargetByte>\n" \
         "                  <CRCPoly>0</CRCPoly>\n" \
         "                  <CRCIntVal>0</CRCIntVal>\n" \
         "                  <CRCFinalXorVal>0</CRCFinalXorVal>\n" \
         "                  <CRCRevDataByte>0</CRCRevDataByte>\n" \
         "                  <CRCRevFinalCRC>0</CRCRevFinalCRC>\n" \
         "                  <CRCBitNumber>0</CRCBitNumber>\n" \
         "                </CheckSum>\n"
    c += "                <CountFormat Value=\"Decimal\" />\n" \
         "                <PlusForPositive>True</PlusForPositive>\n"
    c += "                <AddLeadingZeros>True</AddLeadingZeros>\n"
    c += "              </Command>\n" \
         "            </Sequence>\n"
    return c


def matrix_generator(height, width):
    result = ""
    for i in range(0, width):
        for j in range(0, height):
            result += sequence_generator(i, j)
    file = "C:/Users/fhu/Desktop/Result.txt"
    with open(file, 'w') as destination:
        destination.write(result)
    print(result)
    counter = 0
    for i in range(0, height):
        counter = feedback_sequence_generator(width, counter)
    return result


# __________________________________________________________________________________________________________#
# __________________________________________________________________________________________________________#
# __________________________________________________________________________________________________________#
# Here begins the functions for the reply sequences generator for the matrix

def reply_data_generator(input1, output1):
    e = "Preampt gain ch "+ str(input1+1) + " status" + str(output1+1)
    # the following line will put the output in bytes
    e = bytes(e, 'utf-8')
    # this line transforms the command into HEX code
    e = binascii.hexlify(e)
    # it then is returned to string format
    e = e.decode('utf-8')
    # and then put in ALL UPPER CASE as following a normal sequence generated by the device editor
    e = e.upper()
    # print(d)
    return e


def reply_sequence_caption_generator(input1, output1):
    # feedback replay name / petite description like on off
    b = "GV " + str(input1+1) + "," + str(output1+1)
    return b


def reply_generator(mapped_seq, input1, output1):
    d = "                <Reply Caption=\"" + str(reply_sequence_caption_generator(input1, output1)) + "\" Guid=\""
    d += str(sequence_name_generator()) + "\">\n"
    # le truc a changer la valeur pr le ON/OFF par exemple
    d += "                  <Data>" + str(reply_data_generator(input1, output1)) + "</Data>\n"
    #    d += "                  <Data>" + "OUT"+ str(output1+1) + " VS IN" + str(input1+1) + "</Data>\n"
    d += "                  <MappedToSeq Value=\"" + mapped_seq + "\" />\n"
    d += "                </Reply>\n"
    return d


def question_generator(count):
    # General command request for
    e = "GET OUT" + str(count+1) + " VS\r"   # <-------------- POSSIBLE CHANGE HERE
    # the following line will put the output in bytes
    e = bytes(e, 'utf-8')
    # this line transforms the command into HEX code
    e = binascii.hexlify(e)
    # it then is returned to string format
    e = e.decode('utf-8')
    # and then put in ALL UPPER CASE as following a normal sequence generated by the device editor
    e = e.upper()
    # print(d)
    return e


def feedback_sequence_generator(width, count):
    # Big Description nom de base
    # this is the request "STA" for the FSA DV-HMSW4K-88 Matrix
    request = question_generator(count)
    result = "            <FeedbackSequence Name=\"" + str(sequence_name_generator())
    result += "\" Caption=\"Source for Output " + str(count+1) + "\"" + " Mode=\"Pull\" UseHeaderFooter=\"True\">\n"
    result += "              <RequestCommand>" + request + "</RequestCommand>\n"
    result += "              <RequestInterval Value=\"3000\" />\n"
    result += "              <ReplyDataType Value=\"String\" />\n"
    result += "              <ReplyNumberRange Min=\"0\" Max=\"0\" />\n"
    result += "              <ReplyByteOffset Value=\"" + str(0) + "\" />\n"
    result += "              <ReplyValueType Value=\"\" />\n"
    result += "              <ReplyValueFormat Value=\"\" />\n"
    result += "              <ReplyThousandSeperator Value=\"\" />\n"
    result += "              <ReplyTimeFormat Value=\"\" />\n"
    result += "              <ReplyByteOrder Value=\"\" />\n"
    result += "              <ReplyMaxNumberOfBytesForValue Value=\"\" />\n"
    result += "              <Replies>\n"
    p = count * width
    for y in range(0, width):
            result += str(reply_generator(sequence_names[p], count, y))
            p += 1
    result += "              </Replies>\n"
    result += "            </FeedbackSequence>\n"
    print(result)
    # -------------VERY IMPORTANT ------
    # ----------------THIS FUNCTION IS IN ITERATIVE MODE AND SO THE WRITING IS DONE IN APPEND MODE -------------------
    file_2 = "C:/Users/fhu/Desktop/Feedback.txt"
    with open(file_2, 'a') as destination_2:
        destination_2.write(result)

    return count + 1


if __name__ == '__main__':
    file2 = "C:/Users/fhu/Desktop/Feedback.txt"
    with open(file2, 'w') as destination:
        destination.write('')
        destination.close()

    matrix_generator(10, 4)