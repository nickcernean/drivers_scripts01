import string
import random
import binascii

r = 'abcdef'
sequence_names = []

# this function generates a string for the sequence name in the device, it uses the hex values for the sequence

def letters(n):
    if (n<10):
        return str(n)
    elif (n == 10):
        return "A"
    elif (n == 11):
        return "B"
    elif (n == 12):
        return "C"
    elif (n == 13):
        return "D"
    elif (n == 14):
        return "E"
    elif (n == 15):
        return "F"
    else:
        return letters(n//16) + letters(n%16)

def zero(n):
    if(n>15):
        return letters(n)
    else:
        return "0" + letters(n)

def sequence_name_generator():
    a = ""
    for i in range(0, 36):
        if i == 8 or i == 13 or i == 18 or i == 23:
            a += "-"
        else:
            b = random.choice(r + string.digits)
            a += b.lower()
    # print(a)
    return a

# set the Feedback answer/reply
# set the state for every replay

def reply_data_generator(state, count):
    if state==0:
        e = "/PARAM/COBRANET/TXMUTE/IDX" + str(count + 1) + " 1"
    elif state==1:
        e = "/PARAM/COBRANET/TXMUTE/IDX" + str(count + 1) + " 0"
    elif state == 2:
        e = "/PARAM/COBRANET/TXMUTE/IDX" + str(count + 1) + " 0"
    elif state == 3:
        e = "/PARAM/COBRANET/TXMUTE/IDX" + str(count + 1) + " 0"

    #if count > 8 and state <= 8:
    #    e = "*255s? I" + str(count+1) + "O0" + str(state+1)
    #elif count <= 8 and state > 8:                                      #FOR all MATRICES!!! most used for numbers bigger than 10
    #    e = "*255s? I0" + str(count+1) + "O" + str(state+1)
    #elif count > 8 and state > 8:                                      #FOR all MATRICES!!! most used for numbers bigger than 10
    #    e = "*255s? I" + str(count+1) + "O" + str(state+1)

    # the following line will put the output in bytes
    e = bytes(e, 'utf-8')
    # this line transforms the command into HEX code
    e = binascii.hexlify(e)
    # it then is returned to string format
    e = e.decode('utf-8')
    # and then put in ALL UPPER CASE as following a normal sequence generated by the device editor
    e = e.upper()
    # print(d)
    return e

#set the question for the replies, feedback question, feedback request/get command

def question_generator(count):
    e = "/PARAM/COBRANET/TXMUTE/IDX" + str(count+1) + " ?"

    #if count > 8:
    #    e = "*255?I" + str(count + 1) + "!\r"

    # the following line will put the output in bytes
    e = bytes(e, 'utf-8')
    # this line transforms the command into HEX code
    e = binascii.hexlify(e)
    # it then is returned to string format
    e = e.decode('utf-8')
    # and then put in ALL UPPER CASE as following a normal sequence generated by the device editor
    e = e.upper()
    # e = "1B" + e
    # print(d)
    return e

# this function will give the proper name to the sequences

#  sequence_caption_generator gives the name for the Feedback answer/replay command
def sequence_caption_generator(state):
    if state == 0:
        b = "Inpout 1"
    elif state == 1:
        b = "Mute off"
    elif state == 2:
        b = "Input 3"
    elif state == 3:
        b = "Input 4"
    elif state == 4:
        b = "Input 5"
    elif state == 5:
        b = "Input 6"
    elif state == 6:
        b = "Input 7"
    elif state == 7:
        b = "Input 8"
    elif state == 8:
        b = "Input 9 9"
    elif state == 9:
        b = "In 10"
    elif state == 10:
        b = "In 11"
    elif state == 11:
        b = "In 12"
    elif state == 12:
        b = "In 13"
    elif state == 13:
        b = "In 14"
    elif state == 14:
        b = "In 15"
    elif state == 15:
        b = "In 16"
    elif state == 16:
        b = "17"
    elif state == 17:
        b = "18"
    elif state == 18:
        b = "19"
    elif state == 19:
        b = "20"
    elif state == 20:
        b = "21"
    elif state == 21:
        b = "22"
    elif state == 22:
        b = "23"
    elif state == 23:
        b = "24"
    elif state == 24:
        b = "25"
    elif state == 25:
        b = "26"
    elif state == 26:
        b = "27"
    elif state == 27:
        b = "28"
    elif state == 28:
        b = "29"
    elif state == 29:
        b = "30"
    elif state == 30:
        b = "31"
    elif state == 31:
        b = "32"
    return b


def reply_generator(state, count):
    d = "                <Reply Caption=\"" + sequence_caption_generator(state) + "\" Guid=\""
    d += str(sequence_name_generator()) + "\">\n"
    d += "                  <Data>" + reply_data_generator(state, count) + "</Data>\n"
    d += "                  <MappedToSeq Value=\"" + "\" />\n"
    d += "                </Reply>\n"
    return d


# set feedback name here!!! strating form Caption=\"

def feedback_sequence_generator(count, states=[]):
    # this is the string to request the feedback from the machine: in this case the MCA-88Xi
    request = question_generator(count)
    result = "            <FeedbackSequence Name=\"" + str(sequence_name_generator())
    result += "\" Caption=\"Sent Bundle Ch. " + str(count+1) + " " + "Mute status" + "\"" + " Mode=\"Pull\" " \
                                                                           "UseHeaderFooter=\"True\">\n"
   # result += "\" Caption=\"Room . News" + "\"" + " Mode=\"Pull\" " \
   #                                                                        "UseHeaderFooter=\"True\">\n"
    result += "              <RequestCommand>" + question_generator(count) + "</RequestCommand>\n"
    result += "              <RequestInterval Value=\"3000\" />\n"
    result += "              <ReplyDataType Value=\"String\" />\n"
    result += "              <ReplyNumberRange Min=\"0\" Max=\"0\" />\n"
    result += "              <ReplyByteOffset Value=\"0\" />\n"
    result += "              <ReplyValueType Value=\"\" />\n"
    result += "              <ReplyValueFormat Value=\"\" />\n"
    result += "              <ReplyThousandSeperator Value=\"\" />\n"
    result += "              <ReplyTimeFormat Value=\"\" />\n"
    result += "              <ReplyByteOrder Value=\"\" />\n"
    result += "              <ReplyMaxNumberOfBytesForValue Value=\"\" />\n"
    result += "              <Replies>\n"
    for y in range(0, states.__len__()):
            result += str(reply_generator(states[y], count))
    result += "              </Replies>\n"
    result += "            </FeedbackSequence>\n"
    print(result)

    return result

# stated_of_setting set the number of states must be generated

if __name__ == '__main__':
    states_of_setting = [0, 1]# 3, 4, 5 ,6, 7, 8, 9, 10, 11, 12, 13, 14, 15 , 16 , 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
    result_final = ''

# set the range of creating feedback commands

    for i in range(0, 32):
        result_final += feedback_sequence_generator(i, states_of_setting)
    file2 = "C:/Users/fhu/Desktop/Feedback.txt"
    with open(file2, 'w') as destination:
        destination.write(result_final)
        destination.close()
